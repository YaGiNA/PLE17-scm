(define TREE '(1 (2 (3 4)) 6 (7 8 9)) )
(define TREE2 '((1 (2 (3 4)) 6) (7 8 9)) )
(define LIST '(1 2 3 4 5))
(define map-tree
   (lambda (fn tree)
      (cond 
        ((null? tree) '() )
        ((pair? tree)
          (cons (map-tree fn (car tree))
                (map-tree fn (cdr tree))
        ))
        (else (fn tree))
   )))

(define map-tree2
   (lambda (fn tree)
      (cond ((null? tree) '() )
          ((pair? tree)
           (map (lambda(tree) (map-tree fn tree)) tree)
          )
          (else (fn tree))
   )))
(map-tree even? TREE)
(map-tree even? TREE2)
(map-tree2 even? TREE)
(map-tree2 even? TREE2)